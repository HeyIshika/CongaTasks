# Conga-Tasks

Run ng test for running the application 

Task 1:Given an array of numbers find the inflection point (index) where the part of the array to the left & to the right of the inflection point (index) have EQUAL sum. If there is no inflection point, you can return -1. What is the time complexity & space complexity of your algorithm ? Is this the optimal solution?

Example-1: A = [1, 2, 3, 4, 5, 5, 2, 4, 4].

Inflection point = 4, as  A[0]+A[1]+A[2]+A[3] +A[4] = A[5]+A[6]+A[7]+A[8] = 15

Example-2: A = [-4, 3, 2, 14].

Inflection point = -1, there is no left subarray whose sum is equal to right subarray

ANS > Time Complexity : O(n)
      Space complexity :O(1)
      
      Yes, this is my optimal solution.
 Task 2:
 Given the daily price of onions per 10kgs, find the max price drop onions experienced. Price drop is defined as a decrease in price from a given day to a day in the future. What is the time complexity & space complexity of your algorithm? Is this the optimal solution?

Eg: For the onion prices: P = [21, 19, 24, 32, 30, 31, 34, 31, 31, 26, 29], the max price drop was from $34 to $26 a price drop of $8.

NOTE that maxDrop is not necessarily the difference between minPrice and maxPrice. For instance, in the above example minPrice=19, maxPrice=34, but the onion's price did not fall from 19 to 34, rather it increased from 19 to 34. So it does not constitute a maxDrop.

ANS>> Time Complexity:O(n)
      Space Complexity:O(n)
      
        Yes, this is my optimal solution.